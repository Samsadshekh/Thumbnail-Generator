import React, { useState, useMemo, useCallback } from 'react';
import { ImageFile } from './types';
import Header from './components/Header';
import ImageUploader from './components/ImageUploader';
import { generateThumbnails, analyzeContent, generateThumbnailsFromPrompt } from './services/geminiService';

const App: React.FC = () => {
    // Common State
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [generatedImages, setGeneratedImages] = useState<string[]>([]);
    const [hoveredImage, setHoveredImage] = useState<string | null>(null);
    const [generationMode, setGenerationMode] = useState<'image' | 'prompt'>('image');

    // Image Mode State
    const [title, setTitle] = useState<string>('Best Editing App 2025');
    const [mainImage, setMainImage] = useState<ImageFile | null>(null);
    const [logoImage, setLogoImage] = useState<ImageFile | null>(null);
    const [overlayImage, setOverlayImage] = useState<ImageFile | null>(null);
    const [inspirationImage, setInspirationImage] = useState<ImageFile | null>(null);
    const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);
    const [designConcepts, setDesignConcepts] = useState<string[]>([]);
    const [selectedConcept, setSelectedConcept] = useState<string | null>(null);

    // Prompt Mode State
    const [textPrompt, setTextPrompt] = useState<string>('A vibrant, futuristic cityscape at night with the text "CYBERPUNK 2077" in neon pink, glitchy font.');


    const handleModeChange = (mode: 'image' | 'prompt') => {
        setGenerationMode(mode);
        setError(null);
        setGeneratedImages([]);
        // Reset image-mode specific state if switching away
        if (mode !== 'image') {
            setDesignConcepts([]);
            setSelectedConcept(null);
        }
    };


    const handleMainImageChange = (file: ImageFile | null) => {
        setMainImage(file);
        setDesignConcepts([]);
        setSelectedConcept(null);
        setGeneratedImages([]);
        setError(null);
    };

    const handleInspirationImageChange = (file: ImageFile | null) => {
        setInspirationImage(file);
        setDesignConcepts([]);
        setSelectedConcept(null);
        setGeneratedImages([]);
        setError(null);
    };

    const autoGeneratedPrompt = useMemo(() => {
        if (generationMode !== 'image') return '';

        if (inspirationImage) {
            let prompt = `Act as a professional YouTube thumbnail designer. Analyze the provided 'inspiration thumbnail' for its style, layout, color palette, and font treatment. Replicate this aesthetic to create a new, professional YouTube thumbnail (1280x720).`;
            prompt += ` Use the user's 'main image' as the new background.`;
            if (logoImage) {
                prompt += ` Prominently feature the user's 'logo/face' image.`;
            }
            if (overlayImage) {
                prompt += ` Seamlessly integrate the user's 'overlay' image.`;
            }
            prompt += ` The title text for the new thumbnail is "${title}". The font should match the style of the inspiration thumbnail.`;
            prompt += ` The final result must be engaging, high-contrast, and optimized for a high click-through rate, while using the user's assets. Ensure all text is perfectly readable.`;
            return prompt;
        }

        if (selectedConcept) {
            let prompt = `Act as a professional YouTube thumbnail designer. Create a professional and eye-catching YouTube thumbnail (1280x720) based on the following design concept: "${selectedConcept}".`;
            prompt += ` Use the 'main image' as the primary visual element.`;
            if (logoImage) {
                prompt += ` Integrate the 'logo/face' image prominently.`;
            }
            if (overlayImage) {
                prompt += ` Incorporate the 'overlay' image naturally.`;
            }
            prompt += ` The title text "${title}" should be creatively integrated according to the design concept, ensuring it's bold and highly readable.`;
            prompt += ` The final image should be high-contrast, engaging, professional, and optimized for a high click-through rate.`;
            return prompt;
        }

        return ''; // No prompt available yet
    }, [title, logoImage, overlayImage, inspirationImage, selectedConcept, generationMode]);

    const handleAnalyzeClick = useCallback(async () => {
        if (!mainImage) {
            setError('Please upload a main image to analyze.');
            return;
        }
        setIsAnalyzing(true);
        setError(null);
        setDesignConcepts([]);
        setSelectedConcept(null);
        setGeneratedImages([]);

        try {
            const concepts = await analyzeContent(title, mainImage);
            setDesignConcepts(concepts);
        } catch (e) {
            setError(e instanceof Error ? e.message : 'An unknown error occurred during analysis.');
        } finally {
            setIsAnalyzing(false);
        }
    }, [title, mainImage]);

    const handleGenerateClick = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        setGeneratedImages([]);
        try {
            let images: string[] = [];
            if (generationMode === 'prompt') {
                if (!textPrompt.trim()) {
                    setError('Please enter a prompt to generate thumbnails.');
                    setIsLoading(false);
                    return;
                }
                images = await generateThumbnailsFromPrompt(textPrompt);
            } else { // Image mode
                if (!mainImage || (!autoGeneratedPrompt && !inspirationImage)) {
                    setError('Please complete the required steps (upload images and select a concept or inspiration).');
                    setIsLoading(false);
                    return;
                }
                images = await generateThumbnails(
                    autoGeneratedPrompt,
                    mainImage,
                    logoImage,
                    overlayImage,
                    inspirationImage
                );
            }
            setGeneratedImages(images);
        } catch (e) {
            setError(e instanceof Error ? e.message : 'An unknown error occurred.');
        } finally {
            setIsLoading(false);
        }
    }, [generationMode, textPrompt, autoGeneratedPrompt, mainImage, logoImage, overlayImage, inspirationImage]);

    const handleDownload = (imageUrl: string) => {
        const link = document.createElement('a');
        link.href = imageUrl;
        link.download = `thumbnail-${Date.now()}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    
    const isGenerateDisabled = isLoading || (generationMode === 'image' && (!mainImage || (!selectedConcept && !inspirationImage))) || (generationMode === 'prompt' && !textPrompt.trim());

    return (
        <div className="min-h-screen bg-brand-dark flex flex-col">
            <Header />
            <main className="flex-grow container mx-auto p-4 lg:p-8">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    {/* Left Column: Controls */}
                    <div className="bg-brand-dark-light p-6 rounded-lg shadow-lg flex flex-col gap-6">
                        <div className="flex border-b border-gray-700 mb-2">
                            <button onClick={() => handleModeChange('image')} className={`py-2 px-4 text-sm font-medium transition-colors ${generationMode === 'image' ? 'text-brand-purple border-b-2 border-brand-purple' : 'text-gray-400 hover:text-white'}`}>Generate with Images</button>
                            <button onClick={() => handleModeChange('prompt')} className={`py-2 px-4 text-sm font-medium transition-colors ${generationMode === 'prompt' ? 'text-brand-purple border-b-2 border-brand-purple' : 'text-gray-400 hover:text-white'}`}>Generate from Prompt</button>
                        </div>
                        
                        {generationMode === 'image' ? (
                            <>
                                <div>
                                    <label htmlFor="title" className="block text-sm font-medium text-gray-300 mb-1">Thumbnail Title</label>
                                    <input
                                        type="text"
                                        id="title"
                                        value={title}
                                        onChange={(e) => setTitle(e.target.value)}
                                        placeholder="e.g., My Epic Gaming Montage"
                                        className="w-full bg-brand-dark-lighter border border-gray-600 rounded-md shadow-sm p-2 text-white focus:ring-brand-purple focus:border-brand-purple"
                                    />
                                </div>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <ImageUploader label="Main Image (Required)" onFileChange={handleMainImageChange} />
                                    <ImageUploader label="Logo / Face" onFileChange={setLogoImage} />
                                    <ImageUploader label="Overlay Element" onFileChange={setOverlayImage} />
                                    <ImageUploader label="Inspiration Thumbnail" onFileChange={handleInspirationImageChange} />
                                </div>
                                {!inspirationImage ? (
                                    <>
                                        <div className="border-t border-gray-700 pt-6">
                                            <h3 className="text-lg font-semibold text-white mb-2">Step 1: Get Design Concepts</h3>
                                            <p className="text-sm text-gray-400 mb-4">Let AI analyze your content and suggest creative directions.</p>
                                            <button
                                                onClick={handleAnalyzeClick}
                                                disabled={isAnalyzing || !mainImage}
                                                className="w-full bg-brand-purple text-white font-bold py-3 px-4 rounded-lg hover:bg-brand-purple-light transition-colors disabled:bg-gray-500 disabled:cursor-not-allowed flex items-center justify-center"
                                                aria-live="polite"
                                            >
                                                {isAnalyzing ? (
                                                     <>
                                                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                                                        Analyzing...
                                                    </>
                                                ) : 'Analyze Content'}
                                            </button>
                                        </div>
                                        {designConcepts.length > 0 && (
                                            <div className="border-t border-gray-700 pt-6 animate-fade-in">
                                                <h3 className="text-lg font-semibold text-white mb-3">Step 2: Choose a Concept</h3>
                                                <div className="space-y-3">
                                                    {designConcepts.map((concept, index) => (
                                                        <div key={index} onClick={() => setSelectedConcept(concept)} className={`p-3 border-2 rounded-lg cursor-pointer transition-all ${selectedConcept === concept ? 'border-brand-purple bg-brand-dark-lighter' : 'border-gray-600 hover:border-gray-500'}`} role="radio" aria-checked={selectedConcept === concept} tabIndex={0} onKeyDown={(e) => e.key === 'Enter' || e.key === ' ' ? setSelectedConcept(concept) : null}>
                                                            <label className="flex items-center space-x-3 cursor-pointer text-sm">
                                                                <span className={`flex items-center justify-center w-5 h-5 border-2 rounded-full transition-all ${selectedConcept === concept ? 'border-brand-purple bg-brand-purple' : 'border-gray-500'}`}>
                                                                  {selectedConcept === concept && <div className="w-2 h-2 bg-white rounded-full"></div>}
                                                                </span>
                                                                <span className="text-gray-200">{concept}</span>
                                                            </label>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}
                                    </>
                                ) : <p className="text-sm text-center text-gray-400 -mt-2">Using inspiration image for style. Ready to generate.</p>}
                            </>
                        ) : (
                            <div>
                                <label htmlFor="text-prompt" className="block text-sm font-medium text-gray-300 mb-1">Describe the thumbnail you want</label>
                                 <textarea
                                    id="text-prompt"
                                    rows={8}
                                    value={textPrompt}
                                    onChange={(e) => setTextPrompt(e.target.value)}
                                    placeholder="e.g., A dramatic thumbnail for a history documentary about ancient Rome. Feature a Roman legionary standing before the Colosseum at sunset. The text 'The Rise and Fall' should be in a bold, cinematic font."
                                    className="w-full bg-brand-dark-lighter border border-gray-600 rounded-md shadow-sm p-2 text-white focus:ring-brand-purple focus:border-brand-purple"
                                />
                                <p className="text-xs text-gray-400 mt-2">Be as descriptive as possible! Include details about subject, setting, colors, mood, and text.</p>
                            </div>
                        )}
                        
                        <div className="mt-auto pt-6 border-t border-gray-700">
                             <button
                                onClick={handleGenerateClick}
                                disabled={isGenerateDisabled}
                                className="w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-500 transition-colors disabled:bg-gray-500 disabled:cursor-not-allowed flex items-center justify-center"
                                aria-live="polite"
                            >
                                {isLoading ? (
                                    <>
                                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                                        Generating...
                                    </>
                                ) : 'Generate Thumbnails'}
                            </button>
                        </div>
                    </div>

                    {/* Right Column: Results */}
                    <div className="bg-brand-dark-light p-6 rounded-lg shadow-lg">
                        <h2 className="text-xl font-bold mb-4 text-white">Generated Variations</h2>
                        {error && <div className="bg-red-900 border border-red-700 text-red-200 px-4 py-3 rounded relative mb-4" role="alert">{error}</div>}
                        
                        {(isLoading || isAnalyzing) && (
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4" aria-label="Loading generated images">
                                <div className="aspect-video bg-brand-dark-lighter rounded-lg animate-pulse"></div>
                                <div className="aspect-video bg-brand-dark-lighter rounded-lg animate-pulse"></div>
                            </div>
                        )}

                        {!isLoading && !isAnalyzing && generatedImages.length === 0 && (
                            <div className="flex items-center justify-center h-full text-gray-400">
                                <p>Your generated thumbnails will appear here.</p>
                            </div>
                        )}

                        {generatedImages.length > 0 && (
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                {generatedImages.map((src, index) => (
                                    <div 
                                        key={index}
                                        className="relative group aspect-video"
                                        onMouseEnter={() => setHoveredImage(src)}
                                        onMouseLeave={() => setHoveredImage(null)}
                                    >
                                        <img src={src} alt={`Generated Thumbnail ${index + 1}`} className="w-full h-full object-cover rounded-lg shadow-md" />
                                        {hoveredImage === src && (
                                            <div className="absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center transition-opacity rounded-lg">
                                                <button
                                                    onClick={() => handleDownload(src)}
                                                    className="bg-brand-purple text-white font-bold py-2 px-4 rounded-lg hover:bg-brand-purple-light transition-colors"
                                                >
                                                    Download
                                                </button>
                                            </div>
                                        )}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
            </main>
        </div>
    );
};

export default App;
